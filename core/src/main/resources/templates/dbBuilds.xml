<project>

  <property name="docbook" location="/home/zeil/usr/local/DocBook"/>


  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${docbook}/ant-contrib/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <taskdef name="tidy" classname="org.w3c.tidy.ant.JTidyTask">
    <classpath>
      <pathelement location="${docbook}/jtidy/jtidy.jar"/>
    </classpath>
  </taskdef>


  <path id="dbk.classpath">
    <pathelement location="${docbook}/saxon/saxon.jar"/>
    <pathelement location="${docbook}/stylesheets/docbook-xsl-ns/extensions/saxon65.jar"/>
    <pathelement location="${docbook}/saxon/resolver.jar"/>
    <pathelement location="${docbook}/xslthl/xslthl-2.0.1.jar"/>
    <pathelement location="${docbook}/saxon/"/>
  </path>


  <macrodef name="transform">
    <attribute name="xform" default="UnknownTransform"/>
    <attribute name="input" default="UnknownInput"/>
    <attribute name="output" default="UnknownOutput"/>
    <element name="args" optional="yes"/>
    <sequential>
      <java 
	 classname="com.icl.saxon.StyleSheet"
	 classpathref="dbk.classpath"
	 fork="true"
	 >
	<arg value="-x"/>
	<arg value="org.apache.xml.resolver.tools.ResolvingXMLReader"/>
	<arg value="-y"/>
	<arg value="org.apache.xml.resolver.tools.ResolvingXMLReader"/>
	<arg value="-r"/>
	<arg value="org.apache.xml.resolver.tools.CatalogResolver"/>
	<arg value="-u"/>
	<jvmarg value="-Dxslthl.config=file://${docbook}/stylesheets/docbook-xsl-ns/highlighting/xslthl-config.xml"/>
	<arg value="-o"/>
	<arg value="@{output}"/>
	<arg value="@{input}"/>
	<arg value="@{xform}"/>
	<args/>
      </java>
    </sequential>
  </macrodef>




  <macrodef name="preprocessDB">
    <attribute name="format"/>
    <element name="defined" optional="yes"/> 
    <sequential>
      <!--
      <echo file="${doc}.info.dbk">% ${doc.title}
% ${doc.author}
% ${docModDate}

      </echo>
      -->
      <java classname="edu.odu.cs.macroproc.MacroProcessor" >
	<classpath>
	  <pathelement location="../../templates/codeAnnotation.jar"/>
	</classpath>
	<arg value="-c%"/>
	<arg value="-o${doc}-@{format}.dbk"/>
	<arg value="-D_@{format}"/>
	<defined/>
	<arg value="-i../../templates/macros.dbk"/>
	<arg value="${doc}.dbk"/>
      </java>
    </sequential>
  </macrodef>


  <macrodef name="postprocessHTMLdb">
    <attribute name="file"/>
    <sequential>
    <replace
	file="@{file}">
      <replacefilter token='&lt;span class="co"&gt;/*...*/&lt;/span&gt;' value="&amp;#x22ee;"/>
      <replacefilter token='&lt;span class="co"&gt;/*1*/&lt;/span&gt;' value="&amp;#x278a;"/>
      <replacefilter token='&lt;span class="co"&gt;/*2*/&lt;/span&gt;' value="&amp;#x278b;"/>
      <replacefilter token='&lt;span class="co"&gt;/*3*/&lt;/span&gt;' value="&amp;#x278c;"/>
      <replacefilter token='&lt;span class="co"&gt;/*4*/&lt;/span&gt;' value="&amp;#x278d;"/>
      <replacefilter token='&lt;span class="co"&gt;/*5*/&lt;/span&gt;' value="&amp;#x278e;"/>
      <replacefilter token='&lt;span class="co"&gt;/*6*/&lt;/span&gt;' value="&amp;#x278f;"/>
      <replacefilter token='&lt;span class="co"&gt;/*7*/&lt;/span&gt;' value="&amp;#x2790;"/>
      <replacefilter token='&lt;span class="co"&gt;/*8*/&lt;/span&gt;' value="&amp;#x2791;"/>
      <replacefilter token='&lt;span class="co"&gt;/*9*/&lt;/span&gt;' value="&amp;#x2792;"/>
    </replace>
    </sequential>
  </macrodef>


  <dependset>
    <srcfileset dir=".">
      <include name="${doc}.dbk"/>
    </srcfileset>
    <targetfileset dir=".">
      <include name="${doc}-*.pdf"/>
      <include name="${doc}-*.html"/>
    </targetfileset>
  </dependset>


  <available property="printable.exists" file="${doc}-printable.pdf"/>
  <target name="dbk2printable" unless="printable.exists">
    <preprocessDB format="printable">
      <defined>
	<arg value="-D_tex"/>
      </defined>
    </preprocessDB>
    <exec executable="pandoc">
      <arg value="${doc}-printable.dbk"/>
      <!--
      <arg value="- -template=../../templates/md-printable.tex"/>
      -->
      <arg value="--highlight-style=tango"/>
      <arg value="--number-sections"/>
	<arg value="-o"/>
	<arg value="${doc}-printable.tex"/>
	<env key="TEXMFHOME" value="../../templates//"/>
    </exec>
    <replace
	file="${doc}-printable.tex">
      <replacefilter token='/*...*/' value="\ensuremath{\vdots}"/>
      <replacefilter token='\CommentTok{/*1*/}' value="\conum{1}"/>
      <replacefilter token='\CommentTok{/*2*/}' value="\conum{2}"/>
      <replacefilter token='\CommentTok{/*3*/}' value="\conum{3}"/>
      <replacefilter token='\CommentTok{/*4*/}' value="\conum{4}"/>
      <replacefilter token='\CommentTok{/*5*/}' value="\conum{5}"/>
      <replacefilter token='\CommentTok{/*6*/}' value="\conum{6}"/>
      <replacefilter token='\CommentTok{/*7*/}' value="\conum{7}"/>
      <replacefilter token='\CommentTok{/*8*/}' value="\conum{8}"/>
      <replacefilter token='\CommentTok{/*9*/}' value="\conum{9}"/>
    </replace>

    <exec executable="latexmk">
      <arg value="-pdf"/>
      <arg value="${doc}-printable.tex"/>
      <env key="TEXMFHOME" value="../../templates//"/>
    </exec>
  </target>

  <macrodef name="getHomeURL">
    <sequential>
      <condition property="homeURL"
		 value="${homePage}">
	<contains string="${homePage}" substring="://"/>
      </condition>
      <condition property="homeURL"
		 value="../${pathToBase}/${homePage}">
	<and>
	  <length string="${homePage}" when="greater" length="0"/>
	  <not><contains string="${homePage}" substring="://"/></not>
	</and>
      </condition>
      
      <condition property="homeURL"
		 value="">
	<not><isset property="homeURL"/></not>
      </condition>
    </sequential>
  </macrodef>


  <macrodef name="genSinglePage">
    <attribute name="input"/>
    <attribute name="output"/>
    <attribute name="css" default="docbook.css"/>
    <attribute name="graphicsPath" default="../../graphics/dbk/"/>
    <element name="additionalArgs" optional="yes"/>
    <sequential>
    <!--echo>genSinglePage : @{input} : @{output} : @{css} : ${pathToBase} : ${pathFromBase}</echo-->

      <getHomeURL/>
      <!-- echo>Home is ${homeURL}</echo-->
      <outofdate>
	<sourcefiles path="@{input}"/>
	<targetfiles path="@{output}"/>
	<sequential>
	  <transform input="@{input}"
		     output="@{output}"
		     xform="${docbook}/stylesheets/sjz/pageWithMath.xsl">
	    <args>
              <additionalArgs/>
	      <arg value="html.stylesheet=@{css}"/>
	      <arg value="section.autolabel=1"/>
	      <arg value="section.autolabel.max.depth=2"/>
	      <arg value="admon.graphics=1"/>
	      <arg value="admon.graphics.extension=.gif"/>
	      <arg value="navig.graphics=1"/>
	      <arg value="navig.graphics.path=@{graphicsPath}"/>
	      <arg value="navig.graphics.extension=.png"/>
	      <arg value="callout.graphics=1"/>
	      <arg value="callout.graphics.extension=.gif"/>
	      <arg value="callout.graphics.path=@{graphicsPath}/callouts/"/>
	      <arg value="generate.section.toc.level=2"/>
	      <arg value="highlight.source=1"/>
	      <arg value="use.extensions=1"/>
	      <arg value="linenumbering.extension=1"/>
	      <arg value="linenumbering=numbered"/>
	      <arg value="homeURL=${homeURL}"/>
	    </args>
	  </transform>
	</sequential>
      </outofdate>
    </sequential>
  </macrodef>

  <macrodef name="pages-transform">
    <attribute name="input"/>
    <attribute name="output"/>
    <attribute name="outputDir"/>
    <element name="additionalArgs" optional="yes"/>
    <sequential>
      <transform input="@{input}"
		 xform="${docbook}/stylesheets/sjz/chunkWithMath.xsl">
	  <args>
	    <additionalArgs/>

	    <arg value="use.id.as.filename=1"/>
	    <arg value="chunked.filename.prefix=${doc}-pages-"/>
	    <arg value="base.dir=./"/>
	    <arg value="chunk.section.depth=2"/>
	    <arg value="chunk.first.sections=1"/>
	    <arg value="chunker.output.indent=yes"/>
	    <arg value="html.stylesheet=../../styles/docbook.css"/>
	    <arg value="navig.graphics.path=../../graphics/"/>
	    <arg value="section.autolabel=1"/>
	    <arg value="section.autolabel.max.depth=2"/>
	    <arg value="admon.graphics=1"/>
	    <arg value="admon.graphics.extension=.gif"/>
	    <arg value="navig.graphics=1"/>
	    <arg value="navig.graphics.extension=.png"/>
	    <arg value="navig.graphics.path=../../graphics/"/>
	    <arg value="callout.graphics=1"/>
	    <arg value="callout.graphics.extension=.gif"/>
	    <arg value="callout.graphics.path=../../graphics/callouts/"/>
	    <arg value="generate.section.toc.level=1"/>
	    <arg value="highlight.source=1"/>
	    <arg value="use.extensions=1"/>
	    <arg value="linenumbering.extension=1"/>
	    <arg value="linenumbering=numbered"/>
	    <arg value="homeURL=${homeURL}"/>
	  </args>
	</transform>
      </sequential>
  </macrodef>

  <available property="pages.exists" file="${doc}-pages.html"/>
  <target name="dbk2pages" unless="pages.exists">
    <echo>Generating multiple pages for ${doc}</echo>
    <!--echo>${pathFromBase}/overrides.js  : ${overridesJS}</echo -->
    <getHomeURL/>
    <pages-transform input="${doc}.dbk"
		     outputDir="."
		     output="${doc}-pages.html">
      <additionalArgs>
	<arg value="current.docid=${doc}"/>
	<arg value="pathToBase=../.."/>
	<arg value="printablex=${printable}"/>
	<arg value="email=${emailAddr}"/>
	<arg value="comments=${comments}"/>
	<arg value="courseTitle=${courseName}"/>

	<arg value="formCSS=${formCSS}"/>
	<arg value="overridesCSS=${overridesCSS}"/>
	<arg value="docCSS=${docCSS}"/>
	<arg value="formJS=${formJS}"/>
	<arg value="overridesJS=${overridesJS}"/>
	<arg value="docJS=${docJS}"/>
      </additionalArgs>
    </pages-transform>
    <copy file="${doc}-pages-index.html" tofile="${doc}-pages.html"/>
  </target>




  <available property="html.exists" file="${doc}-html.html"/>
  <target name="dbk2html" unless="html.exists">
    <echo>Generating single page for ${doc}</echo>
    <!--echo>${pathFromBase}/overrides.js  : ${overridesJS}</echo -->
    <getHomeURL/>
    <genSinglePage 
	input="${doc}.dbk"
	output="${doc}-html.html"
	css="../../styles/docbook.css">
      <additionalArgs>
	<arg value="current.docid=${doc}"/>
	<arg value="pathToBase=../.."/>
	<arg value="printablex=${printable}"/>
	<arg value="email=${emailAddr}"/>
	<arg value="comments=${comments}"/>
	<arg value="courseTitle=${courseName}"/>
	<arg value="formCSS=${formCSS}"/>
	<arg value="overridesCSS=${overridesCSS}"/>
	<arg value="docCSS=${docCSS}"/>
	<arg value="formJS=${formJS}"/>
	<arg value="overridesJS=${overridesJS}"/>
	<arg value="docJS=${docJS}"/>
      </additionalArgs>
    </genSinglePage>
  </target>




</project>