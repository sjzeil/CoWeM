/*
 * CoWeM plugin v1 build file
 * Steven J Zeil, Old Dominion Univ.
 */


apply plugin: 'groovy' 
apply plugin: 'ivy-publish'
apply plugin: 'java'
apply plugin: 'java-gradle-plugin'



apply plugin: 'project-report'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

group = 'edu.odu.cs.zeil'
version = '1.10'

gradlePlugin {
    plugins {
        CourseWebsite {
            id="edu.odu.cs.cowem.course"
            implementationClass = "edu.odu.cs.cowem.CourseWebsite"
        }
        Group {
            id="edu.odu.cs.cowem.group"
            implementationClass = "edu.odu.cs.cowem.Group"
        }
        Documents {
            id="edu.odu.cs.cowem.documents"
            implementationClass = "edu.odu.cs.cowem.Documents"
        }
    }
}


// Credentials are loaded from ~/.gradle/gradle.properties
if(project.hasProperty("ivyRepoUser")){
    ext.ivyRepoUser = "$ivyRepoUser";
} else {
    ext.ivyRepoUser = "user";
}
if(project.hasProperty("ivyRepoPass")){
    ext.ivyRepoPass = "$ivyRepoPass";
} else {
    ext.ivyRepoPass = "password";
}


repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }

    // Use my own CS dept repo
    ivy {
        url 'https://secweb.cs.odu.edu/~zeil/ivyrepo'
    }
}


publishing {
    publications {
        ivyJava(IvyPublication) {
            organisation 'edu.odu.cs.zeil'
            module 'cowem-plugin'
            revision project.version
            descriptor.status = 'integration'   // milestone, release
            descriptor.branch = 'v1'

            from components.java
        }
    }

    repositories {
        ivy {
            name 'ivyRepo'
            url 'sftp://atria.cs.odu.edu:22/home/zeil/secure_html/ivyrepo'
            // Readable via https://www.cs.odu.edu/~zeil/ivyrepo
            credentials {
                username project.ivyRepoUser
                password project.ivyRepoPass
            }
        }
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.2.0+'
    }
}


dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'org.hidetake:gradle-ssh-plugin:2.2.0+'
    compile 'org.pegdown:pegdown:1.6.0+'
    compile 'org.slf4j:slf4j-api:1.7.0+'
    compile 'net.sf.saxon:saxon-dom:8.7+'
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.8.0.201705170830-rc1+'
    compile 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3+'
    testRuntime 'edu.odu.cs.zeil:report_accumulator:1.1+'
    testRuntime 'org.slf4j:slf4j-simple:1.7.0+'
}

sourceSets {
    test {
        java {
            srcDir 'src/integrationTest/java'
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Course Website Management',
            'Implementation-Version': '0.1'
    }
    // from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}


////////  Website report Generation ///////////////////

checkstyle {
    ignoreFailures = true
    showViolations = false
    configProperties = [ "suppressionFile" : file('config/checkstyle/checkstyle.suppressions.xml')]
}


pmd {
    ruleSetFiles = files("config/pmd/pmd.xml")
}

tasks.withType(Checkstyle) {
    reports {
        html.destination project.file("build/reports/checkstyle/main.html")
    }
}

pmd {
    ignoreFailures = true
    consoleOutput = false
}

test.ignoreFailures=true
checkstyleTest.enabled = false
pmdTest.enabled = false
check.dependsOn htmlDependencyReport

task copyWebPages (type: Copy) {
    from 'src/main/html'
    into 'build/reports'
}

task copyDocs (type: Copy) {
    from 'build/docs'
    into 'build/reports/docs'
    dependsOn 'javadoc'
}

task reports (dependsOn: ['htmlDependencyReport', 'javadoc', 'check',
    'copyWebPages', 'copyDocs', 'jacocoTestReport']) {
    description 'Generate all reports for this project'
    group 'Reporting'
}

def theBuildNumber = '';
if (project.hasProperty('buildNumber')) {
    theBuildNumber = project.buildNumber
}

def websiteDir = 'cowem-plugin'

task reportStats (type: JavaExec) {
    description 'Compute current project statistics from reports'
    group 'Reporting'
    dependsOn 'reports'
    classpath = sourceSets.test.runtimeClasspath
    main = 'edu.odu.cs.zeil.report_accumulator.Main';
    args = [theBuildNumber,
        'http://www.cs.odu.edu/~zeil/gitlab/' + websiteDir + '/reports/',
        'build/reports']
}

task deployReports (type: Copy) {
    description 'copy all reports to project web page'
    group 'Publishing'
    dependsOn 'reportStats'
    from 'build/reports'
    into '/home/zeil/public_html/gitlab/' + websiteDir + '/reports'
}
