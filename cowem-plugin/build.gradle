/*
 * CoWeM plugin v1 build file
 * Steven J Zeil, Old Dominion Univ.
 */


plugins {
    id 'groovy'
    id 'java'
    id 'java-gradle-plugin'
    id 'project-report'
    id 'jacoco'
    id 'pmd'
	id 'org.unbroken-dome.test-sets' version '3.0.1'
    id "org.xbib.gradle.plugin.git" version "2.0.0"
    id 'maven'
    id 'signing'
}

group 'edu.odu.cs.zeil'
version '1.19.0'

sourceCompatibility = "1.11"
targetCompatibility = "1.11"

java {
    withJavadocJar()
    withSourcesJar()
}


gradlePlugin {
    plugins {
        CourseWebsite {
            id="edu.odu.cs.zeil.cowem.course"
            implementationClass = "edu.odu.cs.cowem.CourseWebsite"
        }
        Group {
            id="edu.odu.cs.zeil.cowem.group"
            implementationClass = "edu.odu.cs.cowem.Group"
        }
        Documents {
            id="edu.odu.cs.zeil.cowem.documents"
            implementationClass = "edu.odu.cs.cowem.Documents"
        }
    }
}




repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}


artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}


dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'org.hidetake:gradle-ssh-plugin:2.10.1'
    implementation 'org.pegdown:pegdown:1.6.0'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'net.sf.saxon:Saxon-HE:10.5'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.6.0.201912101111-r'
	
	testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.1"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.1"
	
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
//    testRuntimeOnly 'edu.odu.cs.zeil:report_accumulator:1.3+'
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.30'
}

testSets { integrationTest }

tasks.withType(Test) {
    useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
		}
}

check.dependsOn integrationTest


jar {
    manifest {
        attributes 'Implementation-Title': 'Course Website Management',
            'Implementation-Version': '0.1'
    }
    // from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}


//task install (dependsOn: ['jar', 'publishToMavenLocal']) {
//}


uploadArchives {

    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'CoWeM'
                description 'A static site generator for course websites from MarkDown.'
                url 'https://sjzeil.github.io/CoWeM/'
                packaging 'jar'
                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/sjzeil/CoWeM/blob/main/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id "sjzeil"
                        name 'Steven Zeil'
                        email 'zeil@cs.odu.edu'
                    }
                }
                scm {
                    connection 'scm:git:https://github.com/sjzeil/CoWeM.git'
                    developerConnection 'scm:git:ssh:git@github.com:sjzeil/CoWeM.git'
                    url 'https://github.com/sjzeil/CoWeM'
                }
            }
        }
        /*
        maven {
            name = "oducs"
            url = layout.buildDirectory.dir("repo")
        }
        */
    }
}


////////  Website report Generation ///////////////////




pmd {
    ruleSetFiles = files("config/pmd/pmd.xml")
    ignoreFailures = true
    consoleOutput = false
}

test.ignoreFailures=true
pmdTest.enabled = false
check.dependsOn htmlDependencyReport

task copyWebPages (type: Copy) {
    from 'src/main/html'
    into 'build/reports'
}

task copyDocs (type: Copy) {
    from 'build/docs'
    into 'build/reports/docs'
    dependsOn 'javadoc'
}

task reports (dependsOn: ['htmlDependencyReport', 'javadoc', 'check',
    'copyWebPages', 'copyDocs', 'jacocoTestReport']) {
    description 'Generate all reports for this project'
    group 'Reporting'
}

/*
def theBuildNumber = '';
if (project.hasProperty('buildNumber')) {
    theBuildNumber = project.buildNumber
}

def websiteDir = 'cowem-plugin'

task reportStats (type: JavaExec) {
    description 'Compute current project statistics from reports'
    group 'Reporting'
    dependsOn 'reports'
    classpath = sourceSets.test.runtimeClasspath
    main = 'edu.odu.cs.zeil.report_accumulator.Main';
    args = [theBuildNumber,
        'https://www.cs.odu.edu/~zeil/gitlab/' + websiteDir + '/reports/',
        'build/reports']
}

task deployReports (type: Copy) {
    description 'copy all reports to project web page'
    group 'Publishing'
    dependsOn 'reportStats'
    from 'build/reports'
    into '/home/zeil/secure_html/gitlab/' + websiteDir + '/reports'
}

*/

////////  Website publication on GitHub pages ///////////////////


task clonePages() {
    doLast {
        mkdir 'build/gh-pages'
        def thisRepo = rootProject.projectDir.toString()
        def pagesDir = "$buildDir/gh-pages"
        project.delete {
            delete pagesDir
        }
        def grgit = git.clone {
            dir = pagesDir
            uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
    }
}

task copyReports (type: Copy, dependsOn: ['reports', 'clonePages']) {
    from "$buildDir/reports"
    into "$buildDir/gh-pages/reports"
}

task updateGHPages (dependsOn: 'copyReports') {
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        exec {
            workingDir "$buildDir/gh-pages/reports"
            commandLine '/bin/sh', '-c', 'date > date.txt'
        }
        def pagesDir = "$buildDir/gh-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
        }
        grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
    }
}
