/*
 * CoWeM plugin v1 build file
 * Steven J Zeil, Old Dominion Univ.
 */


plugins {
    id 'groovy'
    id 'maven-publish'
    id 'java'
    id 'java-gradle-plugin'
    id 'project-report'
    id 'jacoco'
    id 'pmd'
    id "com.github.node-gradle.node" version "2.2.4"
	id 'org.unbroken-dome.test-sets' version '3.0.1'
    id 'org.ajoberstar.git-publish' version '2.1.3'
}

group 'edu.odu.cs.zeil'
version '1.19.0'

sourceCompatibility = "1.11"
targetCompatibility = "1.11"


gradlePlugin {
    plugins {
        CourseWebsite {
            id="edu.odu.cs.cowem.course"
            implementationClass = "edu.odu.cs.cowem.CourseWebsite"
        }
        Group {
            id="edu.odu.cs.cowem.group"
            implementationClass = "edu.odu.cs.cowem.Group"
        }
        Documents {
            id="edu.odu.cs.cowem.documents"
            implementationClass = "edu.odu.cs.cowem.Documents"
        }
    }
}




repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }
}


dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'org.hidetake:gradle-ssh-plugin:2.10.1+'
    implementation 'org.pegdown:pegdown:1.6.0+'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'net.sf.saxon:Saxon-HE:10.5'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.6.0.201912101111-r+'
	implementation "com.github.node-gradle:gradle-node-plugin:2.2.4"
	
	testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.1"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:5.6.1"
	
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
//    testRuntime 'edu.odu.cs.zeil:report_accumulator:1.3+'
    testRuntime 'org.slf4j:slf4j-simple:1.7.30+'
}

testSets { integrationTest }

tasks.withType(Test) {
    useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
		}
}

check.dependsOn integrationTest


jar {
    manifest {
        attributes 'Implementation-Title': 'Course Website Management',
            'Implementation-Version': '0.1'
    }
    // from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}


task install (dependsOn: ['jar', 'publishToMavenLocal']) {
}


gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'git@github.com:sjzeil/CoWeM.git'  // or https:: ? 

    // where to fetch from prior to fetching from the remote (i.e. a local repo to save time)
    //referenceRepoUri = 'file://../'

    // branch will be created if it doesn't exist
    branch = 'gh-pages'

    // repoDir = file("$buildDir/gitPublish")   // default

    // what to publish, this is a standard CopySpec
    contents {
        from (rootProject.projectDir) {
            include 'ReleaseNotes.md'
        }

        from 'src/main/html'
        from("$buildDir/reports") {
            into 'reports'
        }
    }

    // what to keep in the existing branch (include=keep)

    preserve {
        include '_config.yml'
        include 'referenceManual/**'
        // exclude '1.0.0/temp.txt'
    }

    commitMessage = 'Publishing build reports'
}

gitPublishCopy.dependsOn("reports")

task deployReports (dependsOn: 'gitPublishPush') {
    
}


////////  Website report Generation ///////////////////




pmd {
    ruleSetFiles = files("config/pmd/pmd.xml")
    ignoreFailures = true
    consoleOutput = false
}

test.ignoreFailures=true
pmdTest.enabled = false
check.dependsOn htmlDependencyReport

task copyWebPages (type: Copy) {
    from 'src/main/html'
    into 'build/reports'
}

task copyDocs (type: Copy) {
    from 'build/docs'
    into 'build/reports/docs'
    dependsOn 'javadoc'
}

task reports (dependsOn: ['htmlDependencyReport', 'javadoc', 'check',
    'copyWebPages', 'copyDocs', 'jacocoTestReport']) {
    description 'Generate all reports for this project'
    group 'Reporting'
}

/*
def theBuildNumber = '';
if (project.hasProperty('buildNumber')) {
    theBuildNumber = project.buildNumber
}

def websiteDir = 'cowem-plugin'

task reportStats (type: JavaExec) {
    description 'Compute current project statistics from reports'
    group 'Reporting'
    dependsOn 'reports'
    classpath = sourceSets.test.runtimeClasspath
    main = 'edu.odu.cs.zeil.report_accumulator.Main';
    args = [theBuildNumber,
        'https://www.cs.odu.edu/~zeil/gitlab/' + websiteDir + '/reports/',
        'build/reports']
}

task deployReports (type: Copy) {
    description 'copy all reports to project web page'
    group 'Publishing'
    dependsOn 'reportStats'
    from 'build/reports'
    into '/home/zeil/secure_html/gitlab/' + websiteDir + '/reports'
}

*/