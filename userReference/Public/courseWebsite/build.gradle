/*
 * CWM documentset v1 build file
 * Steven J Zeil, Old Dominion Univ.
 */


configurations {
    build
}

buildscript {
    repositories {
        // jcenter()

        mavenCentral()

        // Use my own CS dept repo
        ivy {
            url 'https://secweb.cs.odu.edu/~zeil/ivyrepo'
        }
    }

    dependencies {
        classpath 'edu.odu.cs.zeil:cwm-utils:1.0-SNAPSHOT'
        classpath 'org.pegdown:pegdown:1.6.0+'
    }
}

import edu.odu.cs.cwm.macroproc.*

/*
 * Tasks for course documentset construction
 *
 * build: creates primary & secondary documents in ../../build/website
 *
 * deploy: (optional) copy document set output to local destination
 *
 * publish: (optional) copy document set output to remote destination (via rsync or scp)
 *
 */
 
 
 /*
    What I would like to eventually have:
  
 documents {
    mainDocument 'courseWebsite.md' // defaults to project.name + ".md"
    index        'html'             // defaults to formats[0]
    formats <<    'html'            // adds 'html' to formats
    // or
    formats       ['html', 'pages', 'slides', 'epub', 'directory', 'topics', 'modules', 'navigation']
    
    docs        fileset('.') { include '*.mmd' } 
    listings    fileset('.') { 
                  include '*.java' 
                  include '*.h' 
                  include '*.cpp' 
                  include '*.listing' 
                  } 
     support     fileset(.') {
                  include '*.html' 
                  include '*.css' 
                  include '*.js' 
                  include '*.png' 
                  include '*.gif' 
                  include '*.jpg'
                  } 
 }  
    
*/ 
 
 
 def buildArea = file('../../build')
 def workArea = file('../../build/cwm/work/' + project.parent.name + "/" + project.name + '/')
 def finalArea = file('../../build/website/' + project.parent.name + "/" + project.name + '/')
 def chosenFormat = 'html';
 def chosenDelivery = 'online';
 
 task doc_setup (type: Copy, dependsOn: rootProject.tasks['setup']) {
     from file('.')
     into workArea
    
     exclude ('build.gradle')
     exclude ('.*')
     exclude ('*/**/*')
     exclude ('**/*~')
 }
 

 task doc_mainDoc (dependsOn: doc_setup)
 
 doc_mainDoc << {
     // Preprocess .md file
	 //    Run macro processor, parameters include format, delivery, courseName
	 MacroProcessor macroProc = new MacroProcessor("%")
	 macroProc.defineMacro(new Macro('_' + chosenFormat, ""));
	 macroProc.defineMacro(new Macro('_delivery', chosenDelivery));
	 macroProc.process (file(buildArea.toString() + '/cwm/templates/macros.md'))
	 File mdDoc = file(workArea.toString() + '/' + project.name + '.md')
	 String macResults = macroProc.process (mdDoc)
	 File expandedMD = file(workArea.toString() + '/' + project.name + '.mac.md') 
	 expandedMD.withWriter('UTF-8') {
	     it.writeLine(macResults)
	 }
	 // Process markdown
	 //    Extract metadata?
	 //    Run peg markdown
	 pdOptions = org.pegdown.Extensions.ALL
	 org.pegdown.PegDownProcessor pdProc = new org.pegdown.PegDownProcessor(pdOptions)
	 String pdResults = pdProc.markdownToHtml(macResults)
	 File htmlV1 = file(workArea.toString() + '/' + project.name + '__html.v1.html') 
     htmlV1.withWriter('UTF-8') {
         it.writeLine(pdResults)
     }
	  
	 // Format-specific post-processing
	 //    Clean up XML (may have been only an artifact of multimarkdown)
	 //    Paginate if appropriate to format
	 //    XSLT md-format.xsl, extensive property list
	 //    Text substitutions: course properties, local properties file if present, modification date?
	 //    Test substitution: code filter
 }
 
 task doc_secondaryDocs (dependsOn: doc_setup) {
 
 }
 
 task doc_Listings (dependsOn: doc_setup) {
 
 }
 
 task build (type: Copy, dependsOn: [doc_mainDoc, doc_secondaryDocs, doc_Listings]) {
     description 'Prepare document set output'
     dependsOn ':setup'
     from workArea
     into finalArea
     exclude '*.md'
     exclude '*.mmd'
 }
 
 
  rootProject.tasks['build'].dependsOn(build)
 
